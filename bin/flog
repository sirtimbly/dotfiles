#!/bin/bash

# Ensure we are in a git repository
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not in a git repository."
    exit 1
fi

# Step 1: Select a file using fzf with a preview window
# Uses 'bat' for syntax-highlighted preview, falls back to 'cat' if not available.
PREVIEW_CMD="bat --style=numbers --color=always --line-range :500 {} || cat {}"
selected_file=$(git ls-files | fzf --height 80% --layout=reverse --preview "$PREVIEW_CMD" --preview-window=right:50%)

# Exit if no file was selected (e.g., user pressed Esc)
if [ -z "$selected_file" ]; then
    echo "No file selected."
    exit 0
fi

# Step 2: Generate the commit log for the file and pipe it to fzf for interactive browsing
# --follow: Continues listing the history of a file beyond renames
# --pretty=...: Creates a rich, colored, and parsable log format
#
# Step 3: Use fzf's preview to show the diff for the selected commit and file
# --no-sort: Respects the chronological order from git log
# --reverse: Puts the prompt at the top and results at the bottom (most recent at the bottom)
# --preview: Extracts the commit hash (first field) and shows the diff for that file
git log --color=always \
    --pretty=format:"%C(yellow)%h %C(reset)%s %C(blue)(%cr) %C(bold green)<%an>%C(reset)" \
    --follow -- "$selected_file" | \
fzf --ansi --no-sort --reverse --height 80% \
    --header "Commits for '$selected_file' (most recent at bottom)" \
    --preview "git show --color=always \$(echo {} | awk '{print \$1}') -- \"$selected_file\"" \
    --preview-window=right:60%


